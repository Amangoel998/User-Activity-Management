{"version":3,"sources":["components/BarChart.jsx","components/User_Activity.jsx","components/User_Activity_Modal.jsx","components/User.jsx","components/Users_List.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["BarChart","props","start","end","useState","data","setData","useEffect","fetch","then","response","json","e","xType","width","height","yDomain","map","getHours","x","y","getMinutes","console","log","labelAnchorX","labelAnchorY","UserActivity","value","Date","toISOString","activity","date","setDate","parseDate","str","dateString","time","substr","length","clock","split","hours","Number","substring","String","timeZone","toLocaleString","setTime","getTime","dateWithTimeZone","tz","activities","activity_periods","start_time","filter","end_time","Container","Row","xs","Col","FormGroup","onDayClick","getYear","getMonth","getDate","md","className","UserActivityModal","userData","show","setShow","Modal","size","onHide","aria-labelledby","dialogClassName","centered","Header","closeButton","Title","real_name","Body","Footer","Button","onClick","close","hide","User","open","setOpen","user","variant","aria-expanded","Collapse","in","id","showActivity","UsersList","done","members","users","setUsers","ListGroup","Item","key","Home","Card","style","Text","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21bd1bbb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries,\r\n  LabelSeries,\r\n} from \"react-vis\";\r\n\r\nfunction BarChart(props) {\r\n  const start = props.start;\r\n  const end = props.end;\r\n  const chartWidth = 700;\r\n  const chartHeight = 300;\r\n  const chartDomain = [0, 60];\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"/graph_data.json\")\r\n      .then((response) => response.json())\r\n      .then((e) => setData(e));\r\n  }, [setData]);\r\n  return (\r\n    <XYPlot\r\n      xType=\"ordinal\"\r\n      width={chartWidth}\r\n      height={chartHeight}\r\n      yDomain={chartDomain}\r\n    >\r\n      <XAxis />\r\n      <YAxis />\r\n      <VerticalBarSeries data={data} />\r\n      <LabelSeries\r\n        data={data.map((e) => {\r\n          if (start.getHours() === e.x) e.y = start.getMinutes();\r\n          else if (end.getHours() === e.x) e.y = end.getMinutes();\r\n          else if (start.getHours() < e.x && end.getHours() > e.x)\r\n            e.y = chartHeight;\r\n          console.log(e.x, e.y, start.getHours(), start.getMinutes());\r\n          return e;\r\n        })}\r\n        labelAnchorX=\"middle\"\r\n        labelAnchorY=\"text-after-edge\"\r\n      />\r\n    </XYPlot>\r\n  );\r\n}\r\nexport default BarChart;\r\n","import React, { useState } from \"react\";\r\nimport DayPicker from \"react-day-picker\";\r\nimport { Container, Row, Col, FormGroup } from \"react-bootstrap\";\r\nimport BarChart from \"./BarChart\";\r\nimport \"react-day-picker/lib/style.css\";\r\n\r\nfunction UserActivity(props) {\r\n  const [date, setDate] = useState({\r\n    value: new Date().toISOString(),\r\n    activity: null,\r\n  });\r\n  const dateWithTimeZone = (timeZone, str) => {\r\n    let date = new Date(str);\r\n    let utcDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"UTC\" }));\r\n    let tzDate = new Date(date.toLocaleString(\"en-US\", { timeZone: timeZone }));\r\n    \r\n    date.setTime(date.getTime());\r\n    return date;\r\n  };\r\n  const parseDate = (str) => {\r\n    let dateString = str[0] + \" \" + str[1] + \" \" + str[2] + \" \";\r\n    let time = str[3].substr(0, str[3].length - 2);\r\n    let clock = time.split(\":\");\r\n    let hours = Number(clock[0]);\r\n    if (str[3].substring(str[3].length - 2) === \"PM\") hours += 12;\r\n    time = String(hours) + \":\" + clock[1];\r\n    dateString = dateString + time;\r\n    return dateWithTimeZone(props.data.tz, dateString);\r\n  };\r\n  const activities = props.data.activity_periods.map((e) => {\r\n    return {\r\n      start: parseDate(e.start_time.split(\" \").filter((e) => e.length > 0)),\r\n      end: parseDate(e.end_time.split(\" \").filter((e) => e.length > 0)),\r\n    };\r\n  });\r\n  const handleChange = (value) => {\r\n    setDate({\r\n      value: value.toISOString(),\r\n      activity: activities.filter(\r\n        (e) =>\r\n          e.start.getYear() === value.getYear() &&\r\n          e.start.getMonth() === value.getMonth() &&\r\n          e.start.getDate() === value.getDate()\r\n      ),\r\n    });\r\n  };\r\n  return (\r\n    <Container>\r\n      <Row xs={3}>\r\n        <Col>\r\n          <div>\r\n            <FormGroup>\r\n              <span>\r\n                Select Date of Activity\r\n                <DayPicker onDayClick={handleChange} />\r\n              </span>\r\n            </FormGroup>\r\n          </div>\r\n        </Col>\r\n        <Col xs={8} md={4}>\r\n          {date.activity && date.activity.length > 0 ? (\r\n            <div>\r\n              <BarChart\r\n                start={date.activity[0].start}\r\n                end={date.activity[0].end}\r\n              />\r\n              <p className=\"float-right\">Hours</p>\r\n            </div>\r\n          ) : (\r\n            \"No Activity Found\"\r\n          )}\r\n          <table>\r\n            <tbody>{}</tbody>\r\n          </table>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default UserActivity;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport UserActivity from \"./User_Activity\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction UserActivityModal(props) {\r\n  const userData = props.activity;\r\n  const [show, setShow] = useState(props.show);\r\n\r\n  const toggle = () => setShow(!show);\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      size=\"xl\"\r\n      onHide={props.onHide}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      dialogClassName=\"modal-90w\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Activity of User:{\" \" + userData.real_name}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <UserActivity data={userData} />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <h2 className=\"float-left\">{userData.tz}</h2>\r\n        <Button\r\n          onClick={() => {\r\n            toggle();\r\n            return props.close({\r\n              hide: true,\r\n              data: null,\r\n            });\r\n          }}\r\n        >\r\n          OK\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\nexport default UserActivityModal;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Collapse } from \"react-bootstrap\";\r\n\r\nfunction User(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const data = props.user;\r\n  return (\r\n    <div>\r\n      <span className=\"m-2\">{data.real_name}</span>\r\n      <Button\r\n        className=\"float-right\"\r\n        variant=\"primary\"\r\n        onClick={() => setOpen(!open)}\r\n        aria-expanded={open}\r\n      >\r\n        Details\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"mt-3 ml-5\">\r\n          <span>\r\n            User Id: {data.id}\r\n            <p></p>\r\n            Timezone: {data.tz}\r\n          </span>\r\n          <Button\r\n            className=\"float-right\"\r\n            variant=\"success\"\r\n            onClick={() => {\r\n              return props.showActivity({\r\n                hide: !props.hide,\r\n                data: data,\r\n              });\r\n            }}\r\n          >\r\n            View Activity\r\n          </Button>\r\n        </div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\nexport default User;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport User from \"./User\";\r\n\r\nfunction UsersList(props) {\r\n  const [users, setUsers] = useState({\r\n    done: false,\r\n    members: [],\r\n  });\r\n  useEffect(() => {\r\n    setUsers({ done: false });\r\n    fetch(\"/db.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => setUsers({ members: data.members, done: true }));\r\n  }, [setUsers]);\r\n\r\n  return (\r\n    <div>\r\n      <ListGroup>\r\n        {users.done\r\n          ? users.members.map((user) => {\r\n              return (\r\n                <ListGroup.Item key={user.id}>\r\n                  <User hide={props.hide} showActivity={props.show} user={user} />\r\n                </ListGroup.Item>\r\n              );\r\n            })\r\n          : `Loading`}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n}\r\nexport default UsersList;\r\n","import React, { useState } from \"react\";\r\nimport { Card, Col, Container, Row } from \"react-bootstrap\";\r\nimport UserActivityModal from \".//User_Activity_Modal\";\r\nimport UsersList from \"./Users_List\";\r\n\r\nfunction Home() {\r\n  const [showActivity, setShow] = useState({\r\n    hide: true,\r\n    data: null,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {!showActivity.hide ? (\r\n        <UserActivityModal\r\n          show={!showActivity.hide}\r\n          close={setShow}\r\n          activity={showActivity.data}\r\n          // onShow={()=>{console.log(\"heyheye\")}}\r\n          onHide={() => setShow({ hide: true, data: null })}\r\n        />\r\n      ) : null}\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Card style={{ width: \"100%\" }} className=\"mt-5 mb-5\">\r\n              <Card.Body>\r\n                <Card.Title>\r\n                  <h1>Welcome to User Activity System</h1>\r\n                </Card.Title>\r\n                <Card.Text>\r\n                  A user interface that allows a user to view a list of users\r\n                  from a mock API server. On clicking on any user, a modal\r\n                  should open which displays all the time ranges during which\r\n                  they were active on that day, with an option to view all the\r\n                  periods of activity for different days using a calendar.\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <UsersList hide={showActivity.hide} show={setShow} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from './components/Home'\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}